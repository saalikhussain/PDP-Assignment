# -*- coding: utf-8 -*-
"""serial.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_ggsrXWGv1Mc0yUraAV0q72KF29TmdHr
"""

import pandas as pd

# Load dataset
ds = pd.read_csv('nyc_taxi_trip_duration.csv')

# Display the dataset's first few rows
print(ds.head())

# Display basic information
print(ds.info())

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import numpy as np

# Drop rows with missing values
ds = ds.dropna()

# Convert datetime columns to datetime objects
ds['pickup_datetime'] = pd.to_datetime(ds['pickup_datetime'])
ds['dropoff_datetime'] = pd.to_datetime(ds['dropoff_datetime'])

# Extract useful features from datetime
ds['pickup_hour'] = ds['pickup_datetime'].dt.hour
ds['pickup_day'] = ds['pickup_datetime'].dt.day
ds['pickup_month'] = ds['pickup_datetime'].dt.month
ds['pickup_weekday'] = ds['pickup_datetime'].dt.weekday

# Calculate approximate trip distance
def haversine_distance(lat1, lon1, lat2, lon2):
    R = 6371  # Earth radius in kilometers
    phi1 = np.radians(lat1)
    phi2 = np.radians(lat2)
    delta_phi = np.radians(lat2 - lat1)
    delta_lambda = np.radians(lon2 - lon1)
    a = np.sin(delta_phi / 2.0) ** 2 + np.cos(phi1) * np.cos(phi2) * np.sin(delta_lambda / 2.0) ** 2
    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))
    return R * c

ds['trip_distance'] = haversine_distance(
    ds['pickup_latitude'], ds['pickup_longitude'],
    ds['dropoff_latitude'], ds['dropoff_longitude']
)

# Drop unnecessary columns
ds = ds.drop(['id', 'pickup_datetime', 'dropoff_datetime', 'store_and_fwd_flag'], axis=1)

# Separate features and target
X = ds.drop('trip_duration', axis=1)
y = ds['trip_duration']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

print("Preprocessing completed.")

import matplotlib.pyplot as plt
import seaborn as sns

# Plot distribution of the target variable
plt.figure(figsize=(10, 6))
sns.histplot(y, bins=50, kde=True)
plt.title("Distribution of Trip Duration")
plt.xlabel("Trip Duration (seconds)")
plt.ylabel("Frequency")
plt.show()

# Plot correlation heatmap
corr_matrix = ds.corr()
plt.figure(figsize=(12, 8))
sns.heatmap(corr_matrix, annot=True, fmt=".2f", cmap="coolwarm")
plt.title("Feature Correlation Heatmap")
plt.show()

from sklearn.ensemble import RandomForestRegressor
import time

# Initialize Random Forest model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=-1)

# Measure training time
start_time = time.time()
rf_model.fit(X_train_scaled, y_train)
end_time = time.time()

# Print training time
training_time = (end_time - start_time) / 60  # Convert to minutes
print(f"Model training completed in {training_time:.2f} minutes.")

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Measure testing time
start_time = time.time()
y_pred = rf_model.predict(X_test_scaled)
end_time = time.time()

# Print testing time
testing_time = (end_time - start_time) / 60  # Convert to minutes
print(f"Model testing completed in {testing_time:.2f} minutes.")

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"R-squared (R2): {r2:.2f}")


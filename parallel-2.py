# -*- coding: utf-8 -*-
"""parallel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zIrErv4oEew-1HMrPI2LBcDSUywu3AcU
"""

pip install dask[complete] scikit-learn dask-ml pandas

import dask.dataframe as dd
from dask.distributed import Client

# Set up Dask client
client = Client()  # This sets up a local cluster
print(client)

# Load dataset
ds = dd.read_csv('nyc_taxi_trip_duration.csv')

# Display dataset structure
print(ds.head())

import numpy as np

# Convert datetime columns to datetime objects
ds['pickup_datetime'] = dd.to_datetime(ds['pickup_datetime'])
ds['dropoff_datetime'] = dd.to_datetime(ds['dropoff_datetime'])

# Feature engineering: Extract useful datetime features
ds['pickup_hour'] = ds['pickup_datetime'].dt.hour
ds['pickup_day'] = ds['pickup_datetime'].dt.day
ds['pickup_month'] = ds['pickup_datetime'].dt.month
ds['pickup_weekday'] = ds['pickup_datetime'].dt.weekday

# Calculate approximate trip distance
def haversine_distance(lat1, lon1, lat2, lon2):
    R = 6371  # Earth radius in kilometers
    phi1 = np.radians(lat1)
    phi2 = np.radians(lat2)
    delta_phi = np.radians(lat2 - lat1)
    delta_lambda = np.radians(lon2 - lon1)
    a = np.sin(delta_phi / 2.0) ** 2 + np.cos(phi1) * np.cos(phi2) * np.sin(delta_lambda / 2.0) ** 2
    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))
    return R * c

ds['trip_distance'] = haversine_distance(
    ds['pickup_latitude'], ds['pickup_longitude'],
    ds['dropoff_latitude'], ds['dropoff_longitude']
)

# Drop unnecessary columns
ds = ds.drop(['id', 'pickup_datetime', 'dropoff_datetime', 'store_and_fwd_flag'], axis=1)

# Remove rows with missing values
ds = ds.dropna()

# Split features and target
X = ds.drop('trip_duration', axis=1)
y = ds['trip_duration']

# Convert to Dask arrays for distributed processing
X = X.to_dask_array(lengths=True)
y = y.to_dask_array(lengths=True)

from dask_ml.model_selection import train_test_split as dask_train_test_split
from dask.distributed import Client
from sklearn.ensemble import RandomForestRegressor
from time import time

# Set up Dask client
client = Client()

# Convert data to Dask arrays (directly from Dask DataFrame columns)
X_dask = X  # Use the Dask DataFrame directly
y_dask = y

# Split data using Dask
X_train, X_test, y_train, y_test = dask_train_test_split(X_dask, y_dask, test_size=0.2, random_state=42)

# Convert training and testing sets back to NumPy for compatibility with scikit-learn
X_train = X_train.compute()
X_test = X_test.compute()
y_train = y_train.compute()
y_test = y_test.compute()

# Initialize the Random Forest model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=-1)

# Measure training time
start_time = time()
rf_model.fit(X_train, y_train)
end_time = time()

# Compute training time
training_time = (end_time - start_time) / 60  # in minutes
print(f"Distributed Training Time: {training_time:.2f} minutes")

# Generate predictions
y_pred = rf_model.predict(X_test)

# Evaluate the model
from sklearn.metrics import mean_squared_error

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")

from sklearn.metrics import mean_squared_error, mean_absolute_error

# Compute RMSE, MAE, and R2 Score
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mse)

print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"Mean Absolute Error (MAE): {mae:.2f}")

